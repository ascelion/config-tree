apply plugin: 'java'

sourceSets {
	tck {
		java {
			srcDirs 'microprofile/tck/src/main/java'
		}
		resources {
			srcDirs 'microprofile/tck/src/main/resources'
		}
	}
}

dependencies {
	compile project( ':conv' )

	compile 'javax.enterprise:cdi-api'
	compile 'javax.annotation:javax.annotation-api'
	compile 'org.eclipse.microprofile.config:microprofile-config-api'
	compile 'ascelion.shared:cdi-utils'
	compile 'ascelion.shared:fmt-log'

	testCompile 'ascelion.shared:cdi-unit-impl'
	testCompile 'ascelion.shared:cdi-unit-weld'

//	tckRuntime 'org.eclipse.microprofile.config:microprofile-config-tck'
	tckCompile 'javax.enterprise:cdi-api'
	tckCompile 'javax.annotation:javax.annotation-api'
	tckCompile 'org.eclipse.microprofile.config:microprofile-config-api'
	tckCompile 'org.testng:testng'
	tckCompile 'org.hamcrest:hamcrest-library'
	tckCompile 'org.jboss.arquillian.testng:arquillian-testng-container'
	tckRuntime 'org.jboss.arquillian.container:arquillian-weld-embedded'
	tckRuntime 'org.jboss.weld.se:weld-se-shaded'
	tckRuntime 'ch.qos.logback:logback-classic'
}

task tck( type: Test ) {
	scanForTestClasses = false

	classpath += files( 'src/test/resources' )
//	classpath += files( 'microprofile/tck/src/main/resources/internal' )
	classpath += sourceSets.main.output
	classpath += sourceSets.test.output
	classpath += configurations.runtime
	classpath += configurations.tckRuntime

	useTestNG() {
		testReportDirName = file( "$buildDir/test-output" )
		suites 'tck-suite.xml'
	}
}

eclipse {
	classpath {
		plusConfigurations += [configurations.tckRuntime]
	}
}
